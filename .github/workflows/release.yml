name: Clone lazygit, remove restriction, build and release

on:
  schedule:
    - cron: '0 0 * * *'
  push:
  workflow_dispatch:

env:
  LATEST_RELEASE_FILE_NAME: .latest-previously-seen-release

jobs:
  check-for-new-releases:
    runs-on: ubuntu-latest

    outputs:
      latest-release: ${{ steps.get_release.outputs.LATEST_RELEASE }}
      new-release-available: ${{ steps.check_release.outputs.NEW_RELEASE_AVAILABLE }}

    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Get latest lazygit release
        id: get_release
        run: |
          latest_release=$(curl https://api.github.com/repos/jesseduffield/lazygit/releases/latest | jq -r '.name')
          echo "LATEST_RELEASE=$latest_release" >> $GITHUB_OUTPUT

      - name: Check if release is new
        id: check_release
        run: |
          latest_release=${{ steps.get_release.outputs.LATEST_RELEASE }}

          [[ ! -f $LATEST_RELEASE_FILE_NAME ]] && touch $LATEST_RELEASE_FILE_NAME
          latest_previously_seen_release=$(cat $LATEST_RELEASE_FILE_NAME)

          if [ "$latest_previously_seen_release" != "$latest_release" ]; then
            echo "ðŸš€ New release available: $latest_release, the old one was $latest_previously_seen_release" >> $GITHUB_STEP_SUMMARY
            echo "NEW_RELEASE_AVAILABLE=true" >> $GITHUB_OUTPUT
          else
            echo "â™» There is no new release" >> $GITHUB_STEP_SUMMARY
          fi

  save-new-version:
    runs-on: ubuntu-latest
    needs: [ check-for-new-releases ]
    if: needs.check-for-new-releases.outputs.new-release-available == 'true'
    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Commit updated release name
        run: |
          echo "${{ needs.check-for-new-releases.outputs.latest-release }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "${{ needs.check-for-new-releases.outputs.latest-release }}" > $LATEST_RELEASE_FILE_NAME
          git commit -m "Save latest release of lazygit (${{ needs.check-for-new-releases.outputs.latest-release }})" $LATEST_RELEASE_FILE_NAME
          git push

  build-lazygit:
    runs-on: ubuntu-latest
    needs: [ check-for-new-releases ]
    if: needs.check-for-new-releases.outputs.new-release-available == 'true'
    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Clone lazygit
        run: |
          git clone --depth=1 https://github.com/jesseduffield/lazygit.git

      - name: Replace update URL
        run: |
          sed -i '/if self\.config\.UsingGpg()/,/}/d' lazygit/pkg/commands/git_commands/rebase.go lazygit/pkg/commands/git_commands/patch.go

      - name: Remove restrictions
        run: |
          sed -i '/if self\.config\.UsingGpg()/,/}/d' lazygit/pkg/commands/git_commands/rebase.go lazygit/pkg/commands/git_commands/patch.go

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.22.x
          cache: 'false'

      - name: Create directory for builds
        run: |
          mkdir lazygit/builds

      - name: Build linux binary
        run: |
          cd lazygit/
          GOOS=linux go build -o builds/lazygit_${{ needs.check-for-new-releases.outputs.latest-release }}_linux

      - name: Build windows binary
        run: |
          cd lazygit/
          GOOS=windows go build -o builds/lazygit_${{ needs.check-for-new-releases.outputs.latest-release }}_windows.exe

      - name: Build darwin binary
        run: |
          cd lazygit/
          GOOS=darwin go build -o builds/lazygit_${{ needs.check-for-new-releases.outputs.latest-release }}_darwin

      - name: Save binaries
        uses: actions/upload-artifact@v4
        with:
          name: lazygit-binaries
          path: lazygit/builds/

  create-release:
    runs-on: ubuntu-latest
    needs: [ check-for-new-releases, build-lazygit ]
    if: needs.check-for-new-releases.outputs.new-release-available == 'true'
    steps:
      - name: Checkout own repository
        uses: actions/checkout@v4

      - name: Get binaries
        uses: actions/download-artifact@v4
        with:
          name: lazygit-binaries

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ needs.check-for-new-releases.outputs.latest-release }}
          tag_exists_error: false
          force_push_tag: true

      - name: Generate Changelog
        run: |
          echo -e "> [!IMPORTANT]\n> This is not the official lazygit repository! Take a look at the [README](https://github.com/felixschndr/lazygit-without-gpg-restriction/) for further information." > Changelog.txt
          latest_release=$(curl https://api.github.com/repos/jesseduffield/lazygit/releases/latest)
          echo $latest_release | jq -r ".body" >> Changelog.txt

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: lazygit_${{ needs.check-for-new-releases.outputs.latest-release }}_*
          body_path: Changelog.txt
          tag_name: ${{ needs.check-for-new-releases.outputs.latest-release }}
